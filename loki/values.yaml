# values.yaml - Complete Loki Configuration with S3

global:
  image:
    repository: grafana/loki
    tag: 2.8.0
    pullPolicy: IfNotPresent
  persistence:
    enabled: true
    storageClass: ""
    accessModes: ["ReadWriteOnce"]
    size: 10Gi

# RBAC Configuration
rbac:
  create: true
  pspEnabled: false

# Pod Disruption Budget
podDisruptionBudget:
  enabled: true
  minAvailable: 1

# Service Account Configuration
serviceAccount:
  create: true
  name: ""
  annotations: {}
  automountServiceAccountToken: true

# S3 Configuration
s3:
  enabled: true
  endpoint: s3.amazonaws.com
  region: us-east-1
  bucketNames:
    chunks: loki-chunks
    ruler: loki-ruler
    admin: loki-admin
  s3ForcePathStyle: false
  useIAM: false
  accessKeyId: ""
  secretAccessKey: ""
  secretName: loki-s3-credentials

# Core Components
components:
  distributor:
    replicas: 2
    resources:
      limits: { cpu: 500m, memory: 512Mi }
      requests: { cpu: 100m, memory: 128Mi }

  ingester:
    replicas: 3
    persistence: { size: 50Gi }
    resources:
      limits: { cpu: 1000m, memory: 2Gi }
      requests: { cpu: 500m, memory: 1Gi }

  querier:
    replicas: 2
    resources:
      limits: { cpu: 1000m, memory: 2Gi }
      requests: { cpu: 500m, memory: 1Gi }

  queryFrontend:
    replicas: 2
    resources:
      limits: { cpu: 500m, memory: 1Gi }
      requests: { cpu: 200m, memory: 512Mi }

  compactor:
    replicas: 1
    persistence: { size: 100Gi }
    resources:
      limits: { cpu: 1000m, memory: 2Gi }
      requests: { cpu: 500m, memory: 1Gi }

# Monitoring
monitoring:
  enabled: true
  serviceMonitor:
    enabled: true
    interval: 30s
    scrapeTimeout: 30s

# Networking
service:
  type: ClusterIP
  ports:
    http: 3100
    grpc: 9095

# Gateway Configuration
gateway:
  enabled: true
  replicas: 2
  ingress:
    enabled: false
    hosts: [loki.example.com]
    annotations:
      kubernetes.io/ingress.class: nginx

# In-Memory Cache Configuration
cache_config:
  enable_fifocache: true
  default_validity: 12h
  fifocache:
    max_size_bytes: 1GB
    validity: 6h

# Chunk Storage Optimization
chunk_store_config:
  max_look_back_period: 168h
  chunk_cache_config:
    enable_fifocache: true
    fifocache:
      max_size_bytes: 500MB

# Network Policy
networkPolicy:
  enabled: false

# Autoscaling Configuration
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 3
  targetCPUUtilizationPercentage: 80

# Grafana Dashboard Configuration
grafana:
  dashboard:
    enabled: true
    namespace: "monitoring"  # Namespace where Grafana is installed
    labels:
      grafana_dashboard: "1"
    configMap:
      name: loki-grafana-dashboard
      annotations: {}
    json: |
      {
        "title": "Loki Logs Monitoring",
        "description": "Comprehensive dashboard for Loki logs",
        "editable": true,
        "panels": [
          {
            "title": "Log Volume",
            "type": "graph",
            "datasource": "Loki",
            "targets": [
              {
                "expr": "sum(rate({job=~\"$application\"}[5m]) by (level)",
                "legendFormat": "{{level}}"
              }
            ],
            "gridPos": { "h": 8, "w": 12, "x": 0, "y": 0 }
          },
          {
            "title": "Error Rate",
            "type": "stat",
            "datasource": "Loki",
            "targets": [
              {
                "expr": "sum(rate({job=~\"$application\"} |~ \"error|fail|fatal\" [5m]))",
                "legendFormat": "Errors"
              }
            ],
            "gridPos": { "h": 8, "w": 12, "x": 12, "y": 0 }
          },
          {
            "title": "Log Explorer",
            "type": "logs",
            "datasource": "Loki",
            "targets": [
              {
                "expr": "{job=~\"$application\"}",
                "refId": "A"
              }
            ],
            "gridPos": { "h": 12, "w": 24, "x": 0, "y": 8 }
          }
        ],
        "templating": {
          "list": [
            {
              "name": "application",
              "query": "label_values(loki_log_messages_total, job)",
              "refresh": 1,
              "type": "query"
            }
          ]
        }
      }
